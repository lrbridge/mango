package com.mp1;

import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.assertEquals;

import org.junit.Test;

import com.mp1.search.AStarSearch;
import com.mp1.search.base.Search;
import com.mp1.solution.MazeSolution;

public class AStarSearchTest {

	private void assertMazesAreEqual(MazeSolution actual, char[][] expectedPath) {
		assertEquals(actual.path.maze.length, expectedPath.length);
		for(int i=0; i<actual.path.maze.length; i++) {
			assertArrayEquals(actual.path.maze[i], expectedPath[i]);
		}
	}
	
	@Test
	public void astarSimple() {
		System.out.println("A* Search - simple");
		
		char[][] expectedPath = {
				{ '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%' },
				{ '%', '.', '.', '.', '.', '.', '%', '.', '.', '.', '.', '%' },
				{ '%', '%', '%', '%', '%', '.', '.', '.', '%', '%', 'P', '%' },
				{ '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%' } };

		Search x = new AStarSearch("simpleMaze.txt");
		MazeSolution actual = x.solve();

		System.out.println(actual.toString());
		
		assertEquals(actual.pathCost, 12);
		assertEquals(actual.numNodesExpanded, 13);
		assertMazesAreEqual(actual, expectedPath);
	}

    @Test
    public void astarSmall() {
        System.out.println("A* Search - small");

        char[][] expectedPath = {
                { '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%' },
                { '%', '.', '%', ' ', ' ', ' ', '%', ' ', ' ', ' ', '%', ' ', ' ', ' ', '%', ' ', ' ', ' ', '%', ' ', '%', ' ', '%' },
                { '%', '.', '%', '%', ' ', '%', ' ', '%', '%', '%', '%', '%', ' ', '%', ' ', '.', '.', '.', '.', '.', ' ', ' ', '%' },
                { '%', '.', '%', '.', '.', '.', '.', '.', '.', '.', '%', ' ', ' ', ' ', '%', '.', '%', ' ', '%', '.', '%', ' ', '%' },
                { '%', '.', '.', '.', '%', '%', ' ', '%', '%', '.', '%', '%', '%', ' ', '%', '.', ' ', ' ', '%', '.', '%', '%', '%' },
                { '%', ' ', '%', ' ', '%', ' ', ' ', ' ', '%', '.', '.', '.', '.', '.', '.', '.', '%', ' ', '%', '.', '.', 'P', '%' },
                { '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%' }, };

        Search x = new AStarSearch("smallMaze.txt");
        MazeSolution actual = x.solve();

        System.out.println(actual.toString());

        assertEquals(actual.pathCost, 32);
        assertEquals(actual.numNodesExpanded, 58);
        assertMazesAreEqual(actual, expectedPath);
    }

    @Test
    public void astarMedium() {
        System.out.println("A* Search - medium");

        char[][] expectedPath = {
                { '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%' },
                { '%', '.', '%', ' ', ' ', ' ', '%', ' ', ' ', ' ', '%', ' ', ' ', ' ', '%', ' ', ' ', ' ', '%', ' ', '%', ' ', '%' },
                { '%', '.', ' ', ' ', '%', ' ', ' ', ' ', '%', '%', ' ', '%', ' ', '%', '%', '%', '%', ' ', '%', '%', ' ', ' ', '%' },
                { '%', '.', '%', ' ', ' ', ' ', '%', ' ', '%', ' ', '%', ' ', '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', ' ', '%' },
                { '%', '.', '%', '%', ' ', '%', '%', '%', ' ', ' ', ' ', ' ', ' ', '%', '%', ' ', '%', '%', ' ', '%', '%', '%', '%' },
                { '%', '.', '%', ' ', '%', ' ', ' ', ' ', '%', ' ', '%', ' ', '%', ' ', '%', ' ', '%', ' ', ' ', ' ', ' ', ' ', '%' },
                { '%', '.', '%', '%', '%', ' ', '%', ' ', '%', '%', '%', ' ', ' ', '%', ' ', ' ', ' ', ' ', '%', '%', ' ', '%', '%' },
                { '%', '.', '%', ' ', '%', '.', '.', '.', '.', '.', ' ', ' ', '%', ' ', '%', ' ', '%', ' ', ' ', ' ', '%', ' ', '%' },
                { '%', '.', '.', '.', '.', '.', '%', ' ', '%', '.', '%', '%', '%', ' ', ' ', ' ', '%', ' ', '%', ' ', ' ', ' ', '%' },
                { '%', ' ', '%', ' ', '%', ' ', '%', ' ', ' ', '.', '.', '.', '%', ' ', '%', ' ', '%', ' ', ' ', ' ', '%', ' ', '%' },
                { '%', ' ', ' ', ' ', '%', '%', '%', ' ', '%', '%', '%', '.', '%', ' ', '%', ' ', ' ', ' ', '%', ' ', '%', '%', '%' },
                { '%', ' ', '%', ' ', ' ', ' ', ' ', ' ', '%', ' ', '%', '.', '.', '.', '.', '.', '%', ' ', ' ', ' ', ' ', ' ', '%' },
                { '%', '%', ' ', '%', ' ', '%', '%', ' ', ' ', ' ', ' ', '%', '%', '%', '%', '.', '%', ' ', '%', '%', ' ', '%', '%' },
                { '%', ' ', '%', ' ', '%', ' ', ' ', ' ', '%', ' ', '%', ' ', ' ', ' ', ' ', '.', '.', '.', ' ', ' ', '%', ' ', '%' },
                { '%', ' ', ' ', ' ', '%', '%', ' ', '%', '%', ' ', '%', '%', ' ', '%', '%', '%', '%', '.', '%', '%', ' ', ' ', '%' },
                { '%', ' ', '%', ' ', '%', ' ', ' ', ' ', ' ', ' ', '%', ' ', ' ', ' ', ' ', ' ', '%', '.', '%', ' ', '%', ' ', '%' },
                { '%', '%', '%', '%', ' ', '%', '%', ' ', '%', '%', ' ', ' ', '%', '%', ' ', '%', ' ', '.', ' ', '%', ' ', '%', '%' },
                { '%', ' ', '%', ' ', '%', ' ', ' ', ' ', ' ', ' ', '%', ' ', ' ', ' ', '%', ' ', '%', '.', '%', ' ', '%', ' ', '%' },
                { '%', ' ', '%', '%', ' ', '%', ' ', '%', '%', '%', '%', '%', ' ', '%', ' ', ' ', ' ', '.', '.', '.', ' ', ' ', '%' },
                { '%', ' ', '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', ' ', ' ', ' ', '%', ' ', '%', ' ', '%', '.', '%', ' ', '%' },
                { '%', ' ', ' ', ' ', '%', '%', ' ', '%', '%', ' ', '%', '%', '%', ' ', '%', ' ', ' ', ' ', '%', '.', '%', '%', '%' },
                { '%', ' ', '%', ' ', '%', ' ', ' ', ' ', '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', ' ', '%', '.', '.', 'P', '%' },
                { '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%' }, };

        Search x = new AStarSearch("mediumMaze.txt");
        MazeSolution actual = x.solve();

        System.out.println(actual.toString());

        assertEquals(actual.pathCost, 42);
        assertEquals(actual.numNodesExpanded, 88);
        assertMazesAreEqual(actual, expectedPath);
    }

    @Test
    public void astarBig() {
        System.out.println("A* Search - Big");

        char[][] expectedPath = {
                { '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%' },
                { '%', ' ', ' ', ' ', '%', ' ', ' ', ' ', '%', ' ', '%', ' ', '%', ' ', ' ', ' ', '%', ' ', '%', ' ', ' ', ' ', '%', ' ', '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', ' ', '%' },
                { '%', '%', ' ', '%', ' ', '%', ' ', '%', '%', ' ', '%', ' ', '%', ' ', '%', ' ', '%', ' ', ' ', '%', ' ', '%', ' ', ' ', ' ', '%', ' ', '%', '%', ' ', '%', ' ', '%', ' ', ' ', ' ', '%' },
                { '%', ' ', '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', ' ', ' ', ' ', '%', ' ', ' ', ' ', '%', ' ', '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', ' ', '%' },
                { '%', '%', ' ', '%', ' ', '%', '%', ' ', '%', '%', ' ', '%', ' ', '%', ' ', '%', ' ', '%', ' ', ' ', '%', ' ', ' ', ' ', ' ', '%', ' ', '%', ' ', '%', ' ', '%', '%', ' ', '%', '%', '%' },
                { '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', ' ', ' ', ' ', '%', ' ', ' ', ' ', ' ', ' ', '%', ' ', '%', ' ', '%', ' ', '%', ' ', '%', ' ', ' ', ' ', ' ', ' ', '%', ' ', ' ', ' ', '%' },
                { '%', ' ', '%', ' ', '%', ' ', '%', '%', ' ', '%', '%', ' ', '%', ' ', '%', ' ', '%', ' ', '%', ' ', '%', '%', ' ', '%', ' ', ' ', '%', ' ', '%', ' ', '%', '%', ' ', ' ', '%', ' ', '%' },
                { '%', ' ', '%', ' ', ' ', ' ', '%', ' ', ' ', ' ', ' ', ' ', '%', ' ', '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', ' ', ' ', ' ', ' ', ' ', '%', ' ', '%', ' ', ' ', ' ', '%' },
                { '%', ' ', ' ', '%', ' ', '%', '%', ' ', '%', ' ', '%', ' ', ' ', '%', ' ', '%', ' ', '%', '%', '%', '%', ' ', '%', ' ', ' ', ' ', '%', '%', ' ', '%', ' ', ' ', '%', '%', ' ', '%', '%' },
                { '%', ' ', '%', ' ', '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', ' ', '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', ' ', ' ', ' ', ' ', ' ', '%', ' ', ' ', ' ', ' ', ' ', '%' },
                { '%', '%', ' ', '%', ' ', '%', '%', ' ', '%', ' ', '%', ' ', '%', ' ', '%', ' ', '%', ' ', '%', '%', ' ', '%', '%', '%', ' ', '%', ' ', '%', ' ', '%', ' ', '%', ' ', '%', '%', ' ', '%' },
                { '%', ' ', '%', ' ', ' ', ' ', '%', ' ', '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', ' ', ' ', ' ', '%', ' ', ' ', ' ', '%' },
                { '%', ' ', '%', ' ', '%', ' ', ' ', ' ', ' ', '%', ' ', '%', ' ', '%', ' ', '%', '%', ' ', ' ', '%', ' ', '%', '%', ' ', '%', '%', ' ', '%', '%', ' ', '%', ' ', ' ', ' ', '%', ' ', '%' },
                { '%', ' ', ' ', ' ', ' ', ' ', '%', ' ', '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', ' ', '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', ' ', '%', ' ', '%' },
                { '%', ' ', '%', ' ', '%', '%', ' ', '%', ' ', '%', '%', ' ', '%', ' ', '%', ' ', ' ', ' ', '%', ' ', '%', '%', ' ', '%', ' ', '%', ' ', '%', ' ', '%', ' ', '%', '%', '%', '%', ' ', '%' },
                { '%', ' ', ' ', ' ', '%', ' ', ' ', ' ', '%', ' ', '%', ' ', '%', ' ', '%', ' ', '%', ' ', ' ', ' ', '%', ' ', '%', ' ', '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%' },
                { '%', ' ', '%', ' ', ' ', '%', '%', ' ', ' ', '%', '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', ' ', ' ', ' ', ' ', '%', ' ', '%', ' ', '%', '%', '%', ' ', '%', '%', '%', ' ', '%', '%' },
                { '%', ' ', ' ', ' ', '%', ' ', ' ', ' ', '%', ' ', ' ', ' ', '%', ' ', '%', ' ', '%', ' ', ' ', ' ', '%', ' ', '%', ' ', ' ', ' ', '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%' },
                { '%', ' ', '%', ' ', ' ', '%', ' ', '%', ' ', '%', '%', ' ', ' ', ' ', '%', ' ', '%', ' ', '%', '%', '%', ' ', '%', ' ', '%', '%', ' ', '%', ' ', '%', ' ', '%', '%', ' ', '%', ' ', '%' },
                { '%', ' ', '%', ' ', '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', ' ', '%', ' ', ' ', ' ', '%', ' ', ' ', ' ', ' ', ' ', '%', ' ', ' ', ' ', ' ', ' ', '%', ' ', '%', ' ', '%', ' ', '%' },
                { '%', ' ', '%', '%', ' ', '%', ' ', '%', ' ', '%', ' ', '%', '%', ' ', ' ', '%', '%', ' ', ' ', '%', '%', ' ', '%', ' ', '%', '%', ' ', '%', ' ', '%', ' ', '%', ' ', ' ', ' ', ' ', '%' },
                { '%', ' ', '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', ' ', '%', ' ', '%', ' ', ' ', ' ', '%', ' ', ' ', ' ', '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', ' ', '%', ' ', '%' },
                { '%', '%', ' ', ' ', '%', ' ', '%', '%', '%', ' ', ' ', ' ', ' ', '%', '%', '%', ' ', '%', '%', ' ', '%', ' ', ' ', '%', '%', '%', ' ', '%', '%', '%', ' ', '%', '%', ' ', ' ', ' ', '%' },
                { '%', ' ', '%', '.', '.', '.', ' ', ' ', ' ', ' ', '%', ' ', '%', ' ', ' ', ' ', '%', ' ', '%', ' ', ' ', ' ', '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', ' ', '%' },
                { '%', ' ', '%', '.', '%', '.', '%', ' ', '%', '%', ' ', '%', '%', ' ', '%', ' ', '%', ' ', ' ', ' ', '%', ' ', '%', ' ', '%', '%', ' ', '%', ' ', '%', ' ', '%', '%', ' ', '%', '%', '%' },
                { '%', ' ', ' ', '.', '%', '.', '.', '.', '.', '.', '.', '.', '.', '.', '%', ' ', ' ', ' ', '%', ' ', '%', ' ', ' ', ' ', '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', ' ', ' ', ' ', '%' },
                { '%', '%', '%', '.', ' ', '%', ' ', '%', ' ', '%', '%', ' ', '%', '.', '.', '.', '%', ' ', '%', ' ', '%', ' ', '%', '%', ' ', ' ', '%', ' ', '%', ' ', '%', ' ', ' ', ' ', '%', '%', '%' },
                { '%', ' ', '%', '.', '%', ' ', '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', '.', '.', '.', '%', ' ', ' ', ' ', '%', ' ', '%', ' ', '%', ' ', ' ', ' ', ' ', ' ', '%', ' ', ' ', ' ', '%' },
                { '%', '%', ' ', '.', ' ', ' ', ' ', '%', '%', '%', ' ', '%', ' ', '%', ' ', ' ', '%', '.', '.', '.', '%', ' ', ' ', ' ', '%', ' ', ' ', ' ', '%', '%', ' ', '%', ' ', '%', ' ', '%', '%' },
                { '%', ' ', '%', '.', '%', ' ', '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', ' ', ' ', ' ', '%', '.', ' ', ' ', '%', ' ', ' ', ' ', '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%' },
                { '%', ' ', '%', '.', ' ', '%', ' ', ' ', '%', ' ', '%', '%', ' ', '%', ' ', ' ', '%', ' ', '%', '.', '%', '%', '%', '%', '%', ' ', '%', ' ', '%', ' ', '%', '%', ' ', '%', '%', '%', '%' },
                { '%', ' ', '.', '.', '%', ' ', '%', ' ', ' ', ' ', '%', ' ', ' ', ' ', '%', ' ', ' ', ' ', '%', '.', '.', '.', '%', ' ', '%', ' ', ' ', ' ', '%', ' ', ' ', ' ', ' ', ' ', '%', ' ', '%' },
                { '%', '%', '.', '%', ' ', '%', ' ', ' ', '%', ' ', ' ', '%', ' ', '%', ' ', ' ', '%', ' ', ' ', ' ', '%', '.', '.', '.', '.', '.', '%', ' ', '%', ' ', '%', ' ', '%', ' ', ' ', ' ', '%' },
                { '%', ' ', '.', '.', '%', ' ', '%', ' ', ' ', ' ', '%', ' ', ' ', ' ', '%', ' ', ' ', ' ', '%', ' ', '%', ' ', '%', ' ', '%', '.', '.', '.', '%', '.', '.', '.', '.', '.', '%', ' ', '%' },
                { '%', '%', '%', '.', ' ', ' ', ' ', '%', ' ', '%', ' ', '%', '%', ' ', '%', '%', ' ', '%', ' ', ' ', '%', ' ', '%', '%', '%', ' ', '%', '.', '.', '.', '%', ' ', '%', '.', '.', '.', '%' },
                { '%', '.', '.', '.', '%', ' ', '%', ' ', '%', ' ', ' ', ' ', ' ', ' ', '%', ' ', ' ', ' ', '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', ' ', '%', ' ', ' ', ' ', '%', ' ', '%', 'P', '%' },
                { '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%' },

        };

        Search x = new AStarSearch("bigMaze.txt");
        MazeSolution actual = x.solve();

        System.out.println(actual.toString());

        assertEquals(actual.pathCost, 62);
        assertEquals(actual.numNodesExpanded, 273);
        assertMazesAreEqual(actual, expectedPath);
    }


    @Test
    public void astarOpen() {
        System.out.println("A* Search - Open");

        char[][] expectedPath = {
                { '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%' },
                { '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%' },
                { '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%' },
                { '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%' },
                { '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', ' ', ' ', ' ', ' ', '%' },
                { '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', '.', ' ', ' ', '%', ' ', ' ', ' ', ' ', '%' },
                { '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', '.', ' ', ' ', ' ', ' ', ' ', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '.', ' ', ' ', '%', ' ', ' ', ' ', ' ', '%' },
                { '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', '.', ' ', ' ', ' ', ' ', ' ', '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', '.', ' ', ' ', '%', ' ', ' ', ' ', ' ', '%' },
                { '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', '.', ' ', ' ', ' ', ' ', ' ', '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', '.', ' ', ' ', '%', ' ', ' ', ' ', ' ', '%' },
                { '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', '.', ' ', ' ', ' ', ' ', ' ', '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', '.', ' ', ' ', '%', ' ', ' ', ' ', ' ', '%' },
                { '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', '.', ' ', ' ', ' ', ' ', ' ', '%', ' ', ' ', ' ', '.', '.', '.', '.', 'P', '%', '.', ' ', ' ', '%', ' ', ' ', ' ', ' ', '%' },
                { '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', '.', ' ', ' ', ' ', ' ', ' ', '%', ' ', ' ', ' ', '.', '%', '%', '%', '%', '%', '.', ' ', ' ', '%', ' ', ' ', ' ', ' ', '%' },
                { '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', '.', ' ', ' ', ' ', ' ', ' ', '%', ' ', ' ', ' ', '.', '.', '.', '.', '.', '.', '.', ' ', ' ', '%', ' ', ' ', ' ', ' ', '%' },
                { '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', '.', ' ', ' ', ' ', ' ', ' ', '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', ' ', ' ', ' ', ' ', '%' },
                { '%', ' ', ' ', ' ', ' ', ' ', '.', '.', '.', '.', '.', '.', '.', ' ', ' ', ' ', ' ', ' ', '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', ' ', ' ', ' ', ' ', '%' },
                { '%', ' ', ' ', ' ', ' ', ' ', '.', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', ' ', ' ', ' ', ' ', '%' },
                { '%', ' ', ' ', ' ', ' ', ' ', '.', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%' },
                { '%', ' ', ' ', ' ', ' ', ' ', '.', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%' },
                { '%', ' ', ' ', ' ', ' ', ' ', '.', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%' },
                { '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%', '%' },
        };

        Search x = new AStarSearch("openMaze.txt");
        MazeSolution actual = x.solve();

        System.out.println(actual.toString());

        assertEquals(actual.pathCost, 54);
        assertEquals(actual.numNodesExpanded, 123);
        assertMazesAreEqual(actual, expectedPath);
    }

	
	@Test
	public void badGreedy() {
		System.out.println("A* Search - same as greedy unfortunately because of tiebreakers");
		
		char[][] expectedPath = {
				{ '%', '%', '%', '%', '%', '%' },
				{ '%', ' ', ' ', ' ', '%', '%' },
				{ '%', 'P', ' ', '%', '.', '%' },
				{ '%', '.', '%', '.', '.', '%' },
				{ '%', '.', '.', '.', ' ', '%' },
				{ '%', '%', '%', '%', '%', '%' }};
		
		Search x = new AStarSearch("badGreedy.txt");
		MazeSolution actual = x.solve();

		System.out.println(actual.toString());
		
		assertEquals(actual.pathCost, 7);
		assertEquals(actual.numNodesExpanded, 12);
		assertMazesAreEqual(actual, expectedPath);
	}
	
	
	@Test
	public void greedyVsAStar() {
		System.out.println("AStar Search - better than Greedy, gets off bad path faster");
		
		char[][] expectedPath = {
				{ '%', '%', '%', '%', '%', '%', '%', '%' },
				{ '%', ' ', ' ', ' ', ' ', ' ', '%', '%' },
				{ '%', '.', 'P', '%', '%', ' ', ' ', '%' },
				{ '%', '.', '%', ' ', ' ', '%', ' ', '%' },
				{ '%', '.', '.', '.', '%', ' ', ' ', '%' },
				{ '%', ' ', ' ', '.', '.', '%', '%', '%' },
				{ '%', ' ', ' ', ' ', ' ', ' ', ' ', '%' },
				{ '%', '%', '%', '%', '%', '%', '%', '%' }};
		
		Search x = new AStarSearch("greedyVsAStar.txt");
		MazeSolution actual = x.solve();

		System.out.println(actual.toString());
		
		assertEquals(actual.pathCost, 7);
		assertEquals(actual.numNodesExpanded, 11);
		assertMazesAreEqual(actual, expectedPath);
	}
        
    @Test
	public void ckwTest() {
		System.out.println("CKW Test");
		
		char[][] expectedPath = {
                    {'%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%'},
                    {'%','.','.','.','.','.','.','.','.','.','.','.','.','.','.','.','%'},
                    {'%','.','%','%','%','%','%','%','%','%','%','%','%','%','%','.','%'},
                    {'%','.','.','.','.','.','.','.','.','.','.','.','.','.','%','.','%'},
                    {'%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','.','%','%','%'},
                    {'%',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ',' ','.','.','P','%'},
                    {'%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%','%'}};
                    
		
		Search x = new AStarSearch("simpleMazeCKW.txt");
		MazeSolution actual = x.solve();

		System.out.println(actual.toString());
		
		assertEquals(actual.pathCost, 34);
		assertEquals(actual.numNodesExpanded, 59);
		assertMazesAreEqual(actual, expectedPath);
	}
	
	@Test
	public void greedyVsAStar2() {
		System.out.println("AStar Search - finds optimal (unlike greedy)");
		
		char[][] expectedPath = {
				{ '%', '%', '%', '%', '%', '%', '%', '%', '%' },
				{ '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%' },
				{ '%', ' ', 'P', ' ', ' ', ' ', ' ', ' ', '%' },
				{ '%', ' ', '.', ' ', ' ', ' ', ' ', ' ', '%' },
				{ '%', ' ', '.', ' ', ' ', ' ', ' ', ' ', '%' },
				{ '%', ' ', '.', ' ', ' ', ' ', '%', ' ', '%' },
				{ '%', ' ', '.', '%', '%', '%', '.', '%', '%' },
				{ '%', ' ', '.', '%', '%', '%', '.', ' ', '%' },
				{ '%', ' ', '.', '.', '.', '.', '.', ' ', '%' },
				{ '%', ' ', ' ', ' ', ' ', ' ', ' ', ' ', '%' },
				{ '%', '%', '%', '%', '%', '%', '%', '%', '%' }};
		
		Search x = new AStarSearch("greedyVsAStar2.txt");
		MazeSolution actual = x.solve();

		System.out.println(actual.toString());
		
		assertEquals(actual.pathCost, 12);
		assertEquals(actual.numNodesExpanded, 44);
		assertMazesAreEqual(actual, expectedPath);
	}
	
}
